import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * databases.java
 *
 * Created on Oct 21, 2020, 4:25:51 AM
 */

/**
 *
 * @author Amit
 */
public class frmDatabases extends javax.swing.JFrame {

    /** Creates new form databases */
    public frmDatabases() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonBack = new javax.swing.JButton();
        jLabelDirectory = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonCreateDatabase = new javax.swing.JButton();
        jButtonDeleteDatabase = new javax.swing.JButton();
        jButtonUseDatabase = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jLabelDirectory.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabelDirectory.setText("localhost > Database");

        jButtonCreateDatabase.setText("Create Database");
        jButtonCreateDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateDatabaseActionPerformed(evt);
            }
        });

        jButtonDeleteDatabase.setText("Delete Databsase");
        jButtonDeleteDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteDatabaseActionPerformed(evt);
            }
        });

        jButtonUseDatabase.setText("Use Database");
        jButtonUseDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUseDatabaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 207, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonUseDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jButtonDeleteDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCreateDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 683, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jButtonCreateDatabase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUseDatabase)
                        .addGap(16, 16, 16)
                        .addComponent(jButtonDeleteDatabase)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String enterUsername = null;
    String enterPassword = null;


    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
        frmLogin loginwindowpannel=new frmLogin();
        loginwindowpannel.setVisible(true);
        this.setVisible(false);
}//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonCreateDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateDatabaseActionPerformed
        // TODO add your handling code here:

        String createDatabaseInput=JOptionPane.showInputDialog(this, "Enter the name of database", "Create Database", JOptionPane.OK_CANCEL_OPTION);
        if (createDatabaseInput != null) {
            if(createDatabaseInput.isEmpty()) {
                System.out.println("empty");
            }else if (createDatabaseInput.contains(" ")){
                System.out.println("space");
                JOptionPane.showMessageDialog(null, "Database name should not contain spaces.");
            }else{
//                System.out.println("create database : "+createDatabaseInput);
                int r = jTable1.getRowCount();
                ArrayList databasesname = new ArrayList();

                for (int i=0;i<r;i++) {
                    databasesname.add(jTable1.getValueAt(i, 0));
                }

                //checking if table with particular database name already exit
                if (databasesname.contains(createDatabaseInput)) {
                    JOptionPane.showMessageDialog(null, "This database name already exist, please try different name");
                }else{
                    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/",enterUsername,enterPassword);

                        Statement stmt = con.createStatement();
                        String query1 = "CREATE DATABASE IF NOT EXISTS "+createDatabaseInput+";";
                        int rs1 = stmt.executeUpdate(query1);
                        String query2 = "SHOW DATABASES;";
                        ResultSet rs2 = stmt.executeQuery(query2);

                        model.setRowCount(0);
                        while(rs2.next()) {
                            String databasesName = rs2.getString("Database");
                            model.insertRow(model.getRowCount(), new Object[] {databasesName});
                        }

                    }catch(Exception e) {
                        JOptionPane.showMessageDialog(null, "Error in creating database "+e);
                    }
                }
            }
        }else{
            System.out.println("null");
        }
    }//GEN-LAST:event_jButtonCreateDatabaseActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

//        System.out.println("window is opened");
        
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/",enterUsername,enterPassword);

            Statement stmt = con.createStatement();
            String query = "Show databases;";
            ResultSet rs = stmt.executeQuery(query);

            model.setRowCount(0);
            model.setColumnCount(0);
            String heading[] = {"Database"};
            model.setColumnIdentifiers(heading);
            while(rs.next()) {
                String databasesName = rs.getString("Database");
                model.insertRow(model.getRowCount(), new Object[] {databasesName});
            }

            jTable1.setModel(model);
            rs.close();
            stmt.close();
            con.close();
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Error in connectivity"+e);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButtonDeleteDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteDatabaseActionPerformed
        // TODO add your handling code here:

        int r = jTable1.getSelectedRow();
        int c = jTable1.getSelectedColumn();

        if (r == -1 || c == -1) {
            JOptionPane.showMessageDialog(null, "Please select the database to delete");
        }else{
            String deletingdbname = (String)jTable1.getValueAt(r, c);
            int asd = JOptionPane.showConfirmDialog(null, "Do you really want to delete database : "+deletingdbname,"Delete Database",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
            if (asd == 0) {
                DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/",enterUsername,enterPassword);

                    Statement stmt = con.createStatement();
                    String query1 = "Drop database "+deletingdbname+";";
                    int rs1 = stmt.executeUpdate(query1);
                    String query2 = "Show databases;";
                    ResultSet rs2 = stmt.executeQuery(query2);

                    model.setRowCount(0);
                    while(rs2.next()) {
                        String databasesName = rs2.getString("Database");
                        model.insertRow(model.getRowCount(), new Object[] {databasesName});
                    }

                    jTable1.setModel(model);
                    rs2.close();
                    stmt.close();
                    con.close();
                }catch(Exception e) {
                    JOptionPane.showMessageDialog(null, "Error in connectivity"+e);
                }        
            }
        }
    }//GEN-LAST:event_jButtonDeleteDatabaseActionPerformed

    private void jButtonUseDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUseDatabaseActionPerformed
        // TODO add your handling code here:

        int r = jTable1.getSelectedRow();
        int c = jTable1.getSelectedColumn();

        if (r == -1 || c == -1) {
            JOptionPane.showMessageDialog(null, "Please select the database to use");
        }else{
            String usingdbname = (String)jTable1.getValueAt(r, c);

            frmTables tablewindowpannel=new frmTables();
            tablewindowpannel.setVisible(true);
            tablewindowpannel.useDatabase = usingdbname;
            tablewindowpannel.enterUsername = enterUsername;
            tablewindowpannel.enterPassword = enterPassword;
            this.setVisible(false);
        }

       
}//GEN-LAST:event_jButtonUseDatabaseActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDatabases().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonCreateDatabase;
    private javax.swing.JButton jButtonDeleteDatabase;
    private javax.swing.JButton jButtonUseDatabase;
    private javax.swing.JLabel jLabelDirectory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
