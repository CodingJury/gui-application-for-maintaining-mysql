import java.sql.*;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * databases.java
 *
 * Created on Oct 21, 2020, 4:25:51 AM
 */

/**
 *
 * @author Amit
 */
public class frmUseTable extends javax.swing.JFrame {

    /** Creates new form databases */
    public frmUseTable() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonBack = new javax.swing.JButton();
        jLabelDirectory = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButtonAdd = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jLabelDirectory.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabelDirectory.setText("localhost > Database > ");

        jButtonAdd.setText("Add insert");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Update");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jTable2.setRowHeight(27);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonBack)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonDelete))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String enterUsername = null;
    String enterPassword = null;
    String useDatabase = null;
    String useTable = null;

    int rowSelected = -1;
    

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        
        frmTables tableswindowpannel=new frmTables();
        tableswindowpannel.setVisible(true);
        tableswindowpannel.useDatabase = useDatabase;
        tableswindowpannel.enterUsername = enterUsername;
        tableswindowpannel.enterPassword = enterPassword;
        this.setVisible(false);
}//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed


        /*-----------CHECKY METHOD TO CHECK ALL FIELDS ARE EMPTY----------------------*/
        int sumOfFieldContent = 0;
        for (int i=0; i<jTable2.getColumnCount(); i++) {
            String value = jTable2.getValueAt(0, i).toString();
            sumOfFieldContent+=value.trim().length();
        }

        /*----------CHECKING IF ALL FIELDS ARE EMPTY-----------------------------------*/
        if (sumOfFieldContent == 0) {
                JOptionPane.showMessageDialog(null, "All fields are empty");
        }else{
                
                if (rowSelected == -1) {
                    /*------------------INSERT QUERY--------------------------*/
                    String sql = "INSERT INTO "+useTable;
                    sql=sql.concat(" (");
                    for (int i=0;i<jTable2.getColumnCount();i++) {
                        String data = (String) jTable2.getValueAt(0, i);
                        if (data == null || data.isEmpty()) {
                            continue;
                        }else{
                            String field = jTable2.getColumnName(i);
                            sql=sql.concat("`"+field+"`");
                            sql=sql.concat(",");
                        }
                    }

                    sql=sql.substring(0,sql.length()-1);  //removing last comma

                    sql=sql.concat(")");
                    sql=sql.concat(" VALUES (");
                    for (int i=0;i<jTable2.getColumnCount();i++) {
                        String data = (String) jTable2.getValueAt(0, i);
                        if (data == null || data.isEmpty()) {
                            continue;
                        }else{
                            sql=sql.concat("\""+jTable2.getValueAt(0, i)+"\"");
                            sql=sql.concat(",");
                        }
                    }
                    sql=sql.substring(0,sql.length()-1);  //removing last comma
                    sql=sql.concat(");");

                    System.out.println(sql);

                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+useDatabase+"",enterUsername,enterPassword);

                        Statement stmt = con.createStatement();

                        String query = sql;

                        int rs = stmt.executeUpdate(query);
                        stmt.close();
                        con.close();
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null, e.getMessage(),"Error on inserting",JOptionPane.ERROR_MESSAGE);
                    }


                }else{
                    /*------------UPDATE QUERY----------------------*/
                    String sql2="UPDATE "+useTable;
                    sql2=sql2.concat(" SET ");
                    for(int i=0;i<jTable2.getColumnCount();i++) {
                        String name = jTable2.getColumnName(i);
                        String data = (String) jTable2.getValueAt(0, i);
                        if (data == null || data.isEmpty()) {
                            continue;
                        }else{
                            sql2=sql2.concat(""+name+"=\""+data+"\", ");
                        }
                    }
                    sql2=sql2.substring(0,sql2.length()-2);
                    sql2=sql2.concat(" WHERE ");
                    for(int i=0;i<jTable2.getColumnCount();i++) {
                        String name = jTable2.getColumnName(i);
                        String data = (String) jTable1.getValueAt(rowSelected, i);
                        if (data == null || data.isEmpty()) {
                            continue;
                        }else{
                            sql2=sql2.concat(""+name+"=\""+data+"\" AND ");
                        }
                    }
                    sql2=sql2.substring(0,sql2.length()-4);
                    sql2=sql2.concat(";");

                    System.out.println(sql2);



                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+useDatabase+"",enterUsername,enterPassword);

                        Statement stmt = con.createStatement();

                        String query = sql2;

                        int rs = stmt.executeUpdate(query);
                        stmt.close();
                        con.close();
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(null, e.getMessage(),"Error on updating",JOptionPane.ERROR_MESSAGE);
                    }

                    jButtonAdd.setText("Add insert");
                    rowSelected = -1; //reseting back to inserting phase;

                }
        }



        /*/////////////////////////////////////////////////////////////////
                               RESETING ALL FIELDS
                          and showing new updated result
         ////////////////////////////////////////////////////////////////////*/
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();

        model.setRowCount(0);
//        model2.setRowCount(0);


        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+useDatabase+"",enterUsername,enterPassword);

            Statement stmt = con.createStatement();

            String query2 = "SELECT * FROM "+useTable+";";
            ResultSet rs2 = stmt.executeQuery(query2);



            /*/////////////////////////////////////////////////////////////////
                                   ADDING DETAILS INTO TABLE
             /////////////////////////////////////////////////////////////////*/
            while(rs2.next()) {
                ArrayList<String> mainFieldData = new ArrayList<String>();
                for (int i=1;i<=jTable2.getColumnCount();i++) {
                    mainFieldData.add(rs2.getString(i));
                }
                String fieldData[] = new String[mainFieldData.size()];

                for (int i = 0; i < mainFieldData.size(); i++) {
                    fieldData[i] = mainFieldData.get(i);
                }
                model.insertRow(model.getRowCount(), fieldData);
            }


            /*----------ENTERING DEFAULT("") FIELD TO TABLE2----------------------
                          to avoid null pointer exception
             -----------------------------------------------------------------*/
            String enterData[] = new String[jTable2.getColumnCount()];

            for (int i = 0; i < jTable2.getColumnCount(); i++) {
                enterData[i] = "";
            }
            model2.insertRow(0, enterData);



            jTable1.setModel(model);
            jTable2.setModel(model2);
            rs2.close();

            stmt.close();
            con.close();
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),"Error in reseting useTable page ",JOptionPane.ERROR_MESSAGE);
        }

}//GEN-LAST:event_jButtonAddActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened


        jLabelDirectory.setText(""+jLabelDirectory.getText()+""+useDatabase+" > "+useTable+" [Inserting table]");

        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();

        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+useDatabase+"",enterUsername,enterPassword);

            Statement stmt = con.createStatement();
            String query = "DESC "+useTable+";";
            ResultSet rs = stmt.executeQuery(query);


            model.setRowCount(0);
//            model2.setRowCount(0);


            /*//////////////////////////////////////////////////////////
                                    HEADING
             /////////////////////////////////////////////////////////*/
            ArrayList<String> mainHeading = new ArrayList<String>();

            while(rs.next()) {
                mainHeading.add(rs.getString("Field"));
            }

            String heading[] = new String[mainHeading.size()];

            for (int i = 0; i < mainHeading.size(); i++) {
                heading[i] = mainHeading.get(i);
            }

            model.setColumnIdentifiers(heading);
            model2.setColumnIdentifiers(heading);




            rs.close();
            String query2 = "SELECT * FROM "+useTable+";";
            ResultSet rs2 = stmt.executeQuery(query2);



            /*/////////////////////////////////////////////////////////////////
                                   ADDING DETAILS INTO TABLE
             /////////////////////////////////////////////////////////////////*/
            while(rs2.next()) {
                ArrayList<String> mainFieldData = new ArrayList<String>();
                for (int i=1;i<=jTable2.getColumnCount();i++) {
                    mainFieldData.add(rs2.getString(i));
                }
                String fieldData[] = new String[mainFieldData.size()];

                for (int i = 0; i < mainFieldData.size(); i++) {
                    fieldData[i] = mainFieldData.get(i);
                }
                model.insertRow(model.getRowCount(), fieldData);
            }



            /*/////////////////////////////////////////////////////////////////
                                 CREATING SINGLE CLICK SYSTEM
             //////////////////////////////////////////////////////////////////*/
            DefaultCellEditor singleClick = new DefaultCellEditor(new JTextField());
            singleClick.setClickCountToStart(1);
            for (int i = 0; i < jTable2.getColumnCount(); i++) {
                jTable2.setDefaultEditor(jTable2.getColumnClass(i), singleClick);
            }



            String enterData[] = new String[jTable2.getColumnCount()];

            for (int i = 0; i < jTable2.getColumnCount(); i++) {
                enterData[i] = "";
            }
            model2.insertRow(0, enterData);


            jTable1.setModel(model);
            jTable2.setModel(model2);
            rs2.close();
            
            stmt.close();
            con.close();
        }catch(Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),"Error in initially opening useTable page ",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed

        int r = jTable1.getSelectedRow();

        if (r == -1) {
            JOptionPane.showMessageDialog(null, "Please select the table row to edit");
        }else{

            for (int i = 0; i<jTable1.getColumnCount(); i++) {
                jTable2.setValueAt(jTable1.getValueAt(r, i), 0, i);
            }

            jButtonAdd.setText("Add Update");
            rowSelected = r;
        }
        
}//GEN-LAST:event_jButtonEditActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed

        if (rowSelected != -1) {
            JOptionPane.showMessageDialog(null, "Please do not delete while updating.");
        }else{
            int r = jTable1.getSelectedRow();
            int noOfCol = jTable1.getColumnCount();

            if (r == -1) {
                JOptionPane.showMessageDialog(null, "Please select the table row to delete");
            }else{
                int option = JOptionPane.showConfirmDialog(null, "Do you really want to delete table row : ","Delete Table row",JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE);
                if (option == 0){
                    String sql = "DELETE FROM "+useTable;
                    sql=sql.concat(" WHERE ");

                    for(int i = 0; i < noOfCol; i++) {
                        String name = jTable1.getColumnName(i);
                        String data = (String) jTable1.getValueAt(r, i);
                        sql=sql.concat(""+name+"=\""+data+"\" AND ");
                    }
                    /*--------------REMOVING LAST AND ----------------*/
                    sql=sql.substring(0,sql.length()-4);

                    sql=sql.concat(";");


                    System.out.println(sql);

                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+useDatabase+"",enterUsername,enterPassword);

                        Statement stmt = con.createStatement();
                        String query = sql;
                        int rs = stmt.executeUpdate(query);


                        stmt.close();
                        con.close();
                    }catch(Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),"Error while deleting row ",JOptionPane.ERROR_MESSAGE);
                    }


                    /*/////////////////////////////////////////////////////////////////
                                           RESETING ALL FIELDS
                                      and showing new updated result
                     ////////////////////////////////////////////////////////////////////*/
                    DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
                    DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();

                    model.setRowCount(0);
            //        model2.setRowCount(0);


                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/"+useDatabase+"",enterUsername,enterPassword);

                        Statement stmt = con.createStatement();

                        String query2 = "SELECT * FROM "+useTable+";";
                        ResultSet rs2 = stmt.executeQuery(query2);



                        /*/////////////////////////////////////////////////////////////////
                                               ADDING DETAILS INTO TABLE
                         /////////////////////////////////////////////////////////////////*/
                        while(rs2.next()) {
                            ArrayList<String> mainFieldData = new ArrayList<String>();
                            for (int i=1;i<=jTable2.getColumnCount();i++) {
                                mainFieldData.add(rs2.getString(i));
                            }
                            String fieldData[] = new String[mainFieldData.size()];

                            for (int i = 0; i < mainFieldData.size(); i++) {
                                fieldData[i] = mainFieldData.get(i);
                            }
                            model.insertRow(model.getRowCount(), fieldData);
                        }


                        /*----------ENTERING DEFAULT("") FIELD TO TABLE2----------------------
                                      to avoid null pointer exception
                         -----------------------------------------------------------------*/
                        String enterData[] = new String[jTable2.getColumnCount()];

                        for (int i = 0; i < jTable2.getColumnCount(); i++) {
                            enterData[i] = "";
                        }
                        model2.insertRow(0, enterData);



                        jTable1.setModel(model);
                        jTable2.setModel(model2);
                        rs2.close();

                        stmt.close();
                        con.close();
                    }catch(Exception e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(),"Error in reseting useTable page ",JOptionPane.ERROR_MESSAGE);
                    }

                }
            }
        }

}//GEN-LAST:event_jButtonDeleteActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDatabases().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JLabel jLabelDirectory;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

}
